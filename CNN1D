{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8134280,"sourceType":"datasetVersion","datasetId":4808241}],"dockerImageVersionId":30684,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, mean_absolute_error, mean_squared_error, confusion_matrix, \\\n    precision_recall_fscore_support, roc_auc_score\nfrom tensorflow.keras import Sequential\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.python.keras.layers import Dense, Conv1D, Flatten, Conv2D\nfrom tensorflow.keras.layers import Conv1D, Flatten, Dense\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\nimport numpy as np\nfrom sklearn.model_selection import GridSearchCV\nfrom imblearn.over_sampling import SMOTE\n\ntf.random.set_seed(1234)\nepochs_number = 150  # number of epochs for the neural networks\ntest_set_size = 0.2  # percentage of the test size comparing to the whole dataset\noversampling_flag = 0  # set to 1 to over-sample the minority class\noversampling_percentage = 0.2  # percentage of the minority class after the oversampling comparing to majority class\n\n\n# Definition of functions\ndef read_data():\n    rawData = pd.read_csv('/kaggle/input/electricity-theft-detection/preprocessedR95.csv')\n\n    # Setting the target and dropping the unnecessary columns\n    y = rawData[['FLAG']]\n    X = rawData.drop(['FLAG', 'CONS_NO'], axis=1)\n\n    print('Normal Consumers:                    ', y[y['FLAG'] == 0].count()[0])\n    print('Consumers with Fraud:                ', y[y['FLAG'] == 1].count()[0])\n    print('Total Consumers:                     ', y.shape[0])\n    print(\"Classification assuming no fraud:     %.2f\" % (y[y['FLAG'] == 0].count()[0] / y.shape[0] * 100), \"%\")\n\n    # columns reindexing according to dates\n    X.columns = pd.to_datetime(X.columns)\n    X = X.reindex(X.columns, axis=1)\n\n    # Splitting the dataset into training set and test set\n    X_train, X_test, y_train, y_test = train_test_split(X, y['FLAG'], test_size=test_set_size, random_state=0)\n    print(\"Test set assuming no fraud:           %.2f\" % (y_test[y_test == 0].count() / y_test.shape[0] * 100), \"%\\n\")\n\n    # Oversampling of minority class to encounter the imbalanced learning\n    if oversampling_flag == 1:\n        over = SMOTE(sampling_strategy=oversampling_percentage, random_state=0)\n        X_train, y_train = over.fit_resample(X_train, y_train)\n        print(\"Oversampling statistics in training set: \")\n        print('Normal Consumers:                    ', y_train[y_train == 0].count())\n        print('Consumers with Fraud:                ', y_train[y_train == 1].count())\n        print(\"Total Consumers                      \", X_train.shape[0])\n\n    return X_train, X_test, y_train, y_test\n\n\ndef results(y_test, prediction):\n    print(\"Accuracy\", 100 * accuracy_score(y_test, prediction))\n    print(\"RMSE:\", mean_squared_error(y_test, prediction, squared=False))\n    print(\"MAE:\", mean_absolute_error(y_test, prediction))\n    print(\"F1:\", 100 * precision_recall_fscore_support(y_test, prediction)[2])\n    print(\"AUC:\", 100 * roc_auc_score(y_test, prediction))\n    print(\"Confusion matrix: \\n\",confusion_matrix(y_test, prediction), \"\\n\")\n\ndef CNN1D(X_train, X_test, y_train, y_test):\n    print('1D - Convolutional Neural Network:')\n\n    # Transforming the dataset into tensors\n    X_train = X_train.to_numpy().reshape(X_train.shape[0], X_train.shape[1], 1)\n    X_test = X_test.to_numpy().reshape(X_test.shape[0], X_test.shape[1], 1)\n\n    # Model creation\n    model = Sequential()\n    model.add(Conv1D(100, kernel_size=7, input_shape=(1034, 1), activation='relu'))\n    model.add(Flatten())\n    model.add(Dense(100, activation='relu'))\n    model.add(Dense(100, activation='relu'))\n    model.add(Dense(64, activation='relu'))\n    model.add(Dense(1, activation='sigmoid'))\n\n    model.compile(loss=keras.losses.binary_crossentropy,\n                  optimizer='adam',\n                  metrics=['accuracy'])\n\n    # model.fit(X_train, y_train, epochs=1, validation_split=0.1, shuffle=False, verbose=1)\n    history=model.fit(X_train, y_train, epochs=epochs_number, validation_split=0, shuffle=False, verbose=1)\n    #prediction = model.predict_classes(X_test)\n    predictions_proba = model.predict(X_test)\n    predictions = (predictions_proba > 0.5).astype(int)  # Apply threshold of 0.5\n    model.summary()\n    results(y_test, predictions)\n    # summarize history for accuracy\n    \n    plt.figure(figsize=(20, 8))\n    plt.plot(history.history['loss'], label='Training Loss')\n    plt.plot(history.history['accuracy'], label='Training Accuracy')\n    plt.title('Training Loss and Accuracy')\n    plt.xlabel('Epochs')\n    plt.ylabel('Loss and Accuracy')\n    plt.legend()\n    plt.grid(True)\n    plt.show()\n\n# ----Main----\nX_train, X_test, y_train, y_test = read_data()\nCNN1D(X_train, X_test, y_train, y_test)","metadata":{"execution":{"iopub.status.busy":"2024-04-16T23:14:16.261086Z","iopub.execute_input":"2024-04-16T23:14:16.261476Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt   # data visualization\nimport seaborn as sns             # statistical data visualization\n\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"execution":{"iopub.status.busy":"2024-04-16T16:42:03.508129Z","iopub.execute_input":"2024-04-16T16:42:03.508548Z","iopub.status.idle":"2024-04-16T16:42:03.523329Z","shell.execute_reply.started":"2024-04-16T16:42:03.508514Z","shell.execute_reply":"2024-04-16T16:42:03.521826Z"},"trusted":true},"execution_count":null,"outputs":[]}]}