{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"},"kaggle":{"accelerator":"none","dataSources":[],"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\nimport itertools\nfrom statsmodels.tsa.arima.model import ARIMA\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\nfrom math import sqrt\nimport numpy as np\n\n# Charger et préparer les données\ndata = pd.read_csv(r'S:\\Mes documents\\Bureau\\PFE MID\\Les articles\\ElectricityTheftDetection\\SmartGridFraudDetection-master\\SmartGridFraudDetection-master\\data\\preprocessedR90_FRAUDE.csv', header=0, parse_dates=[0], index_col=0, squeeze=True)\ndf_transposed = data.set_index('CONS_NO').T\ndf_transposed.index = pd.to_datetime(df_transposed.index)\n\n# Définir le seuil de pic\nseuil_pic = 0.622\n\n# Grid search configurations\np_range = range(0, 5)\nd_range = range(0, 5)\nq_range = range(0, 5)\npdq = list(itertools.product(p_range, d_range, q_range))\n\nresults = []\n\n# Analyse pour chaque client\nfor cons_no, selected_data in df_transposed.iteritems():\n    try:\n        # Grid search pour ARIMA\n        best_aic = float(\"inf\")\n        best_pdq = None\n        for params in pdq:\n            try:\n                model = ARIMA(selected_data.dropna(), order=params)\n                result = model.fit()\n                if result.aic < best_aic:\n                    best_aic = result.aic\n                    best_pdq = params\n            except:\n                continue\n\n        # Création et ajustement du modèle ARIMA\n        model = ARIMA(selected_data.dropna(), order=best_pdq)\n        model_fit = model.fit()\n\n        # Faire des prédictions\n        predictions = model_fit.predict(start=0, end=len(selected_data) - 1)\n\n        # Identifier les pics\n        real_pics = selected_data[selected_data > seuil_pic]\n        pred_pics = predictions[selected_data > seuil_pic]\n\n        # Calculer les différences\n        differences = pred_pics - real_pics\n        max_diff = differences.max()\n        min_diff = differences.min()\n\n        # Stocker les résultats\n        results.append({\n            'CONS_NO': cons_no,\n            'Max_Difference': max_diff,\n            'Min_Difference': min_diff,\n            'Number_of_Peaks': len(real_pics),\n            'Estimated_Peak_Values': pred_pics.mean()  # Moyenne des valeurs estimées des pics\n        })\n    except Exception as e:\n        print(f\"Error processing {cons_no}: {e}\")\n\n# Convertir les résultats en DataFrame\nresults_df = pd.DataFrame(results)\n\n# Calcul du minimum des nombres de pics\nmin_number_of_peaks = results_df['Number_of_Peaks'].min()\n\n# Calcul de l'intervalle pour Min_Difference et Max_Difference\ninterval_min_diff = results_df['Min_Difference'].min()\ninterval_max_diff = results_df['Max_Difference'].max()\n\n# Afficher les résultats calculés\nprint(f\"Minimum Number of Peaks: {min_number_of_peaks}\")\nprint(f\"Interval: [{interval_min_diff}, {interval_max_diff}]\")\n\n# Chemin du fichier où vous souhaitez enregistrer les résultats\noutput_file_path = r'S:\\Mes documents\\Bureau\\PFE MID\\Time series analysis\\Time Series Analysis China\\FRAUD TSA\\SEUIL\\Results_FRAUDE_3227_Analysis.csv'\n\n# Enregistrer le DataFrame dans un fichier CSV\nresults_df.to_csv(output_file_path, index=False)\n\nprint(\"Results saved to CSV file.\")\n","metadata":{},"execution_count":null,"outputs":[]}]}