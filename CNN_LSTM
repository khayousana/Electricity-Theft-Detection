{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8134280,"sourceType":"datasetVersion","datasetId":4808241}],"dockerImageVersionId":30702,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-04-19T22:01:01.997359Z","iopub.execute_input":"2024-04-19T22:01:01.997916Z","iopub.status.idle":"2024-04-19T22:01:02.011001Z","shell.execute_reply.started":"2024-04-19T22:01:01.997882Z","shell.execute_reply":"2024-04-19T22:01:02.009701Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"/kaggle/input/electricity-theft-detection/visualization.csv\n/kaggle/input/electricity-theft-detection/Validation_SansFLAG.csv\n/kaggle/input/electricity-theft-detection/Validation.csv\n/kaggle/input/electricity-theft-detection/preprocessedR95.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, mean_absolute_error, mean_squared_error, confusion_matrix, \\\n    precision_recall_fscore_support, roc_auc_score\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Input, Conv1D, MaxPooling1D, LSTM, Dropout, Flatten, Dense\nfrom tensorflow.keras.optimizers import Adam\nfrom imblearn.over_sampling import SMOTE\nimport tensorflow as tf\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, mean_absolute_error, mean_squared_error, confusion_matrix, \\\n    precision_recall_fscore_support, roc_auc_score\nfrom tensorflow.keras import Sequential\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.python.keras.layers import Dense, Conv1D, Flatten, Conv2D\nfrom tensorflow.keras.layers import Conv1D, Flatten, Dense\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\nimport numpy as np\nfrom sklearn.model_selection import GridSearchCV\nfrom imblearn.over_sampling import SMOTE\n\n\n# Définition des constantes\ntf.random.set_seed(1234)\nepochs_number = 150\ntest_set_size = 0.2\noversampling_flag = 0\noversampling_percentage = 0.2\n\n# Fonction pour lire les données\ndef read_data():\n    rawData = pd.read_csv('/kaggle/input/electricity-theft-detection/preprocessedR95.csv')\n\n    # Séparation des features et de la cible\n    y = rawData[['FLAG']]\n    X = rawData.drop(['FLAG', 'CONS_NO'], axis=1)\n\n    print('Consommateurs normaux:                    ', y[y['FLAG'] == 0].count()[0])\n    print('Consommateurs avec fraude:                ', y[y['FLAG'] == 1].count()[0])\n    print('Total des consommateurs:                  ', y.shape[0])\n    print(\"Classification en supposant aucune fraude: %.2f\" % (y[y['FLAG'] == 0].count()[0] / y.shape[0] * 100), \"%\")\n\n    # Réindexation des colonnes selon les dates\n    X.columns = pd.to_datetime(X.columns)\n    X = X.reindex(X.columns, axis=1)\n\n    # Division des données en ensembles d'entraînement et de test\n    X_train, X_test, y_train, y_test = train_test_split(X, y['FLAG'], test_size=test_set_size, random_state=0)\n    print(\"Ensemble de test en supposant aucune fraude: %.2f\" % (y_test[y_test == 0].count() / y_test.shape[0] * 100), \"%\\n\")\n\n    # Suréchantillonnage de la classe minoritaire pour gérer le déséquilibre\n    if oversampling_flag == 1:\n        over = SMOTE(sampling_strategy=oversampling_percentage, random_state=0)\n        X_train, y_train = over.fit_resample(X_train, y_train)\n        print(\"Statistiques de suréchantillonnage dans l'ensemble d'entraînement: \")\n        print('Consommateurs normaux:                    ', y_train[y_train == 0].count())\n        print('Consommateurs avec fraude:                ', y_train[y_train == 1].count())\n        print(\"Total des consommateurs:                  \", X_train.shape[0])\n\n    return X_train, X_test, y_train, y_test\n\n# Fonction pour afficher les résultats\ndef results(y_test, prediction):\n    print(\"Accuracy:\", 100 * accuracy_score(y_test, prediction))\n    print(\"RMSE:\", mean_squared_error(y_test, prediction, squared=False))\n    print(\"MAE:\", mean_absolute_error(y_test, prediction))\n    print(\"F1:\", 100 * precision_recall_fscore_support(y_test, prediction)[2])\n    print(\"AUC:\", 100 * roc_auc_score(y_test, prediction))\n    print(\"Matrice de confusion:\\n\", confusion_matrix(y_test, prediction), \"\\n\")\n\n# Fonction pour créer et entraîner le modèle CNN-LSTM\ndef CNN_LSTM(X_train, X_test, y_train, y_test):\n    print('CNN-LSTM Model:')\n\n    # Prétraitement des données pour les séquences temporelles\n    X_train = X_train.to_numpy().reshape(X_train.shape[0], X_train.shape[1], 1)\n    X_test = X_test.to_numpy().reshape(X_test.shape[0], X_test.shape[1], 1)\n\n    # Création du modèle\n    model = Sequential([\n        Conv1D(filters=64, kernel_size=3, activation='relu', input_shape=(X_train.shape[1], 1)),\n        MaxPooling1D(pool_size=2),\n        LSTM(50, activation='relu', return_sequences=True),\n        Dropout(0.2),\n        LSTM(50, activation='relu'),\n        Dropout(0.2),\n        Flatten(),\n        Dense(1, activation='sigmoid')\n    ])\n\n    # Compilation du modèle\n    model.compile(optimizer=Adam(learning_rate=0.01), loss='binary_crossentropy', metrics=['accuracy'])\n\n    # Entraînement du modèle\n    model.fit(X_train, y_train, epochs=epochs_number, validation_split=0.1, shuffle=True, verbose=1)\n\n    # Prédiction et évaluation\n    predictions_proba = model.predict(X_test)\n    predictions = (predictions_proba > 0.5).astype(int)\n    model.summary()\n    results(y_test, predictions)\n\n# ----Main----\nX_train, X_test, y_train, y_test = read_data()\nCNN_LSTM(X_train, X_test, y_train, y_test)","metadata":{"execution":{"iopub.status.busy":"2024-04-19T22:12:30.680180Z","iopub.execute_input":"2024-04-19T22:12:30.680899Z"},"trusted":true},"execution_count":null,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_33/82820464.py:43: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n  print('Consommateurs normaux:                    ', y[y['FLAG'] == 0].count()[0])\n/tmp/ipykernel_33/82820464.py:44: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n  print('Consommateurs avec fraude:                ', y[y['FLAG'] == 1].count()[0])\n/tmp/ipykernel_33/82820464.py:46: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n  print(\"Classification en supposant aucune fraude: %.2f\" % (y[y['FLAG'] == 0].count()[0] / y.shape[0] * 100), \"%\")\n","output_type":"stream"},{"name":"stdout","text":"Consommateurs normaux:                     35671\nConsommateurs avec fraude:                 2573\nTotal des consommateurs:                   38244\nClassification en supposant aucune fraude: 93.27 %\nEnsemble de test en supposant aucune fraude: 93.24 %\n\nCNN-LSTM Model:\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/keras/src/layers/convolutional/base_conv.py:99: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n  super().__init__(\n","output_type":"stream"},{"name":"stdout","text":"Epoch 1/150\n\u001b[1m861/861\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m347s\u001b[0m 398ms/step - accuracy: 0.9265 - loss: nan - val_accuracy: 0.9346 - val_loss: nan\nEpoch 2/150\n\u001b[1m 63/861\u001b[0m \u001b[32m━\u001b[0m\u001b[37m━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m5:08\u001b[0m 387ms/step - accuracy: 0.9356 - loss: nan","output_type":"stream"}]}]}