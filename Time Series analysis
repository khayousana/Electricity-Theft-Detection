{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8134280,"sourceType":"datasetVersion","datasetId":4808241}],"dockerImageVersionId":30702,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-04-19T23:32:07.398037Z","iopub.execute_input":"2024-04-19T23:32:07.398603Z","iopub.status.idle":"2024-04-19T23:32:08.743831Z","shell.execute_reply.started":"2024-04-19T23:32:07.398555Z","shell.execute_reply":"2024-04-19T23:32:08.742478Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"/kaggle/input/electricity-theft-detection/visualization.csv\n/kaggle/input/electricity-theft-detection/Validation_SansFLAG.csv\n/kaggle/input/electricity-theft-detection/Validation.csv\n/kaggle/input/electricity-theft-detection/preprocessedR95.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"#!/usr/bin/env python\n# coding: utf-8\n\n# In[3]:\n\n\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nimport statsmodels.api as sm\nimport warnings\nwarnings.filterwarnings('ignore')\nimport datetime\n\n\n# In[4]:\n\n\ndf = pd.read_csv('/kaggle/input/electricity-theft-detection/preprocessedR95.csv', header=0, parse_dates=[0], index_col=0, squeeze=True) \n\ndf\n\n\n# # Visualiser la consommation d'éléctricité pour un client avec un FLAG = 1, i.e : with FRAUD\n\n# In[19]:\n\n\n# Client AVEC FRAUD\n# Transposer les données\ndf_transposed = df.set_index('CONS_NO').T\n\n# Sélectionner les données à tracer (par exemple, CONS_NO='4B75AC4F2D8434CFF62DB64D0BB43103')\nselected_data = df_transposed['4B75AC4F2D8434CFF62DB64D0BB43103']\n\n# Convertir les index en datetime si nécessaire\nselected_data.index = pd.to_datetime(selected_data.index)\n\n# Tracer les données\nplt.figure(figsize=(15, 8))\nplt.plot(selected_data.index, selected_data.values)\nplt.xlabel('Date')\nplt.ylabel('Consommation')\nplt.title('Tracé des données pour CONS_NO=\"4B75AC4F2D8434CFF62DB64D0BB43103\"')\nplt.show()\n\n\n# Est-ce un modèle additif ?\n\n# In[20]:\n\n\nimport pandas as pd\nfrom statsmodels.tsa.seasonal import seasonal_decompose\n\n# Convertir l'index en DatetimeIndex avec une fréquence quotidienne\nselected_data.index = pd.date_range(start=selected_data.index[0], periods=len(selected_data), freq='D')\n\n# Appliquer seasonal_decompose avec l'index mis à jour\nTSA = seasonal_decompose(selected_data).plot()\n\n\n# Est-ce un modèle multiplicatif ?\n\n# In[24]:\n\n\nimport pandas as pd\nfrom statsmodels.tsa.seasonal import seasonal_decompose\n\n# Assurez-vous que l'index est un DatetimeIndex\nselected_data.index = pd.to_datetime(selected_data.index)\n\n# Appliquer seasonal_decompose avec le modèle multiplicatif\nTSA = seasonal_decompose(selected_data, model='multiplicative')\nTSA.plot()\nplt.show()\n\n\n# La série est-elle stationnaire ? (Test de ADFuller)\n\n# In[26]:\n\n\nfrom statsmodels.tsa.stattools import adfuller\nfrom numpy import log\nresult = adfuller(selected_data.values)\nprint('ADF Statistic: %f' % result[0])\nprint('p-value: %f' % result[1])\n\n\n# p-value < 0,05 ==> Série stationnaire \n\n# ACF/PACF\n\n# Sans différenciation\n\n# In[28]:\n\n\n# Client AVEC FRAUD\n# Transposer les données\ndf_transposed = df.set_index('CONS_NO').T\n\n# Sélectionner les données à tracer (par exemple, CONS_NO='4B75AC4F2D8434CFF62DB64D0BB43103')\nselected_data = df_transposed['4B75AC4F2D8434CFF62DB64D0BB43103']\n\n# Convertir les index en datetime si nécessaire\nselected_data.index = pd.to_datetime(selected_data.index)\n\n# Tracer les données\nplt.figure(figsize=(15, 8))\nplt.plot(selected_data.index, selected_data.values)\nplt.xlabel('Date')\nplt.ylabel('Consommation')\nplt.title('Tracé des données pour CONS_NO=\"4B75AC4F2D8434CFF62DB64D0BB43103\"')\nplt.show()\n\n\n# In[27]:\n\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15,7))\n\nplot_acf(selected_data, lags = 36, ax=ax1)\nplot_pacf(selected_data, lags = 36, ax=ax2)\nplt.show()\n\n\n# Avec différenciation d'ordre 1\n\n# In[31]:\n\n\nplt.figure(figsize=(10,5))\nplt.plot(selected_data.diff());\n\n\n# In[33]:\n\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(20,7))\n\nplot_acf(selected_data.diff().dropna(), lags = 36, ax=ax1)\nplot_pacf(selected_data.diff().dropna(), lags = 36, ax=ax2)\nplt.show()\n\n\n# Avec différenciation d'ordre 12\n\n# # Visualiser la consommation d'éléctricité pour un client avec un FLAG = 0, i.e : WITHOUT FRAUD\n\n# In[5]:\n\n\n# Client NON FRAUD\n# Transposer les données\ndf_transposed = df.set_index('CONS_NO').T\n\n# Sélectionner les données à tracer (par exemple, CONS_NO='F3406636BAD1E6E0826E8EDDC9A1BF00')\nselected_data_NOT_FRAUD = df_transposed['F3406636BAD1E6E0826E8EDDC9A1BF00']\n\n# Convertir les index en datetime si nécessaire\nselected_data_NOT_FRAUD.index = pd.to_datetime(selected_data_NOT_FRAUD.index)\n\n# Tracer les données\nplt.figure(figsize=(15, 8))\nplt.plot(selected_data_NOT_FRAUD.index, selected_data_NOT_FRAUD.values)\nplt.xlabel('Date')\nplt.ylabel('Consommation')\nplt.title('Tracé des données pour CONS_NO=\"F3406636BAD1E6E0826E8EDDC9A1BF00\"')\nplt.show()\n\n\n# In[6]:\n\n\nfrom statsmodels.tsa.stattools import adfuller\nfrom numpy import log\nresult = adfuller(selected_data_NOT_FRAUD.values)\nprint('ADF Statistic: %f' % result[0])\nprint('p-value: %f' % result[1])\n\n\n# # p-value > 0.05 on accepte H0 ==> Série n'est pas stationnaire \n\n# Est-ce un modèle additif ?\n\n# In[7]:\n\n\nimport pandas as pd\nfrom statsmodels.tsa.seasonal import seasonal_decompose\n\n# Convertir l'index en DatetimeIndex avec une fréquence quotidienne\nselected_data_NOT_FRAUD.index = pd.date_range(start=selected_data_NOT_FRAUD.index[0], periods=len(selected_data_NOT_FRAUD), freq='D')\n\n# Appliquer seasonal_decompose avec l'index mis à jour\nTSA = seasonal_decompose(selected_data_NOT_FRAUD).plot()\n\n\n# Est-ce un modèle multiplicatif ?\n\n# In[8]:\n\n\nimport pandas as pd\nfrom statsmodels.tsa.seasonal import seasonal_decompose\n\n# Assurez-vous que l'index est un DatetimeIndex\nselected_data_NOT_FRAUD.index = pd.to_datetime(selected_data_NOT_FRAUD.index)\n\n# Appliquer seasonal_decompose avec le modèle multiplicatif\nTSA = seasonal_decompose(selected_data_NOT_FRAUD, model='multiplicative')\nTSA.plot()\nplt.show()\n\n\n# In[9]:\n\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15,7))\n\nplot_acf(selected_data_NOT_FRAUD, lags = 36, ax=ax1)\nplot_pacf(selected_data_NOT_FRAUD, lags = 36, ax=ax2)\nplt.show()\n\n\n# Avec différenciation d'ordre 1\n\n# In[8]:\n\n\nplt.figure(figsize=(10,5))\nplt.plot(selected_data_NOT_FRAUD.diff());\n\n\n# In[11]:\n\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(20,7))\n\nplot_acf(selected_data_NOT_FRAUD.diff().dropna(), lags = 36, ax=ax1)\nplot_pacf(selected_data_NOT_FRAUD.diff().dropna(), lags = 36, ax=ax2)\nplt.show()\n\n\n# In[ ]:\n\n\n\n\n","metadata":{},"execution_count":null,"outputs":[]}]}