{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8134280,"sourceType":"datasetVersion","datasetId":4808241}],"dockerImageVersionId":30698,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-04-19T22:01:01.997359Z","iopub.execute_input":"2024-04-19T22:01:01.997916Z","iopub.status.idle":"2024-04-19T22:01:02.011001Z","shell.execute_reply.started":"2024-04-19T22:01:01.997882Z","shell.execute_reply":"2024-04-19T22:01:02.009701Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"/kaggle/input/electricity-theft-detection/visualization.csv\n/kaggle/input/electricity-theft-detection/Validation_SansFLAG.csv\n/kaggle/input/electricity-theft-detection/Validation.csv\n/kaggle/input/electricity-theft-detection/preprocessedR95.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, mean_absolute_error, mean_squared_error, confusion_matrix, \\\n    precision_recall_fscore_support, roc_auc_score\nfrom tensorflow.keras.optimizers import Adam\nfrom imblearn.over_sampling import SMOTE\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Conv1D, MaxPooling1D, LSTM, Dropout, Flatten, Dense\n\n# Définition des constantes\ntf.random.set_seed(1234)\nepochs_number = 150\ntest_set_size = 0.2\noversampling_flag = 1\noversampling_percentage = 0.2\n\n# Fonction pour lire les données\ndef read_data():\n    rawData = pd.read_csv('S:\\Mes documents\\Bureau\\PFE MID\\Les articles\\ElectricityTheftDetection\\SmartGridFraudDetection-master\\SmartGridFraudDetection-master\\data\\preprocessedR90.csv')\n\n    # Séparation des features et de la cible\n    y = rawData[['FLAG']]\n    X = rawData.drop(['FLAG', 'CONS_NO'], axis=1)\n\n    # Réindexation des colonnes selon les dates\n    X.columns = pd.to_datetime(X.columns)\n    X = X.reindex(X.columns, axis=1)\n\n    # Division des données en ensembles d'entraînement et de test\n    X_train, X_test, y_train, y_test = train_test_split(X, y['FLAG'], test_size=test_set_size, random_state=0)\n\n    # Suréchantillonnage de la classe minoritaire pour gérer le déséquilibre\n    if oversampling_flag == 1:\n        over = SMOTE(sampling_strategy=oversampling_percentage, random_state=0)\n        X_train, y_train = over.fit_resample(X_train, y_train)\n\n    return X_train, X_test, y_train, y_test\n\n# Fonction pour afficher les résultats\ndef results(y_test, prediction):\n    print(\"Accuracy:\", 100 * accuracy_score(y_test, prediction))\n    print(\"RMSE:\", mean_squared_error(y_test, prediction, squared=False))\n    print(\"MAE:\", mean_absolute_error(y_test, prediction))\n    print(\"F1:\", 100 * precision_recall_fscore_support(y_test, prediction)[2])\n    print(\"AUC:\", 100 * roc_auc_score(y_test, prediction))\n    print(\"Matrice de confusion:\\n\", confusion_matrix(y_test, prediction), \"\\n\")\n\n# Fonction pour créer et entraîner le modèle\ndef build_and_train_model(X_train, X_test, y_train, y_test):\n    print('Building and training model:')\n\n    # Prétraitement des données pour les séquences temporelles\n    X_train = X_train.values.reshape(X_train.shape[0], X_train.shape[1], 1)\n    X_test = X_test.values.reshape(X_test.shape[0], X_test.shape[1], 1)\n\n    # Création du modèle\n    input_shape = (X_train.shape[1], X_train.shape[2])\n    nb_classes = 1  # Binary classification\n\n    input_layer = tf.keras.layers.Input(input_shape)\n    lstm = tf.keras.layers.LSTM(8)(input_layer)\n    lstm = tf.keras.layers.Dropout(0.2)(lstm)\n\n    permute = tf.keras.layers.Permute((2, 1))(input_layer)\n    conv1 = tf.keras.layers.Conv1D(filters=128, kernel_size=8, padding='same')(permute)\n    conv1 = tf.keras.layers.BatchNormalization()(conv1)\n    conv1 = tf.keras.layers.Activation(activation='relu')(conv1)\n\n    conv2 = tf.keras.layers.Conv1D(filters=256, kernel_size=5, padding='same')(conv1)\n    conv2 = tf.keras.layers.BatchNormalization()(conv2)\n    conv2 = tf.keras.layers.Activation('relu')(conv2)\n\n    conv3 = tf.keras.layers.Conv1D(128, kernel_size=3, padding='same')(conv2)\n    conv3 = tf.keras.layers.BatchNormalization()(conv3)\n    conv3 = tf.keras.layers.Activation('relu')(conv3)\n\n    gap_layer = tf.keras.layers.GlobalAveragePooling1D()(conv3)\n\n    concat = tf.keras.layers.concatenate([lstm, gap_layer])\n\n    output_layer = tf.keras.layers.Dense(nb_classes, activation='sigmoid')(concat)\n\n    model = tf.keras.models.Model(inputs=input_layer, outputs=output_layer)\n\n    optimizer = tf.keras.optimizers.Adam(lr=0.01)\n    model.compile(loss='binary_crossentropy', optimizer=optimizer, metrics=['accuracy'])\n\n    # Entraînement du modèle\n    history = model.fit(X_train, y_train, epochs=epochs_number, validation_split=0.1, shuffle=True, verbose=1)\n\n    # Prédiction et évaluation\n    predictions_proba = model.predict(X_test)\n    predictions = (predictions_proba > 0.5).astype(int)\n    model.summary()\n    results(y_test, predictions)\n    \n    # Plotting\n    plt.figure(figsize=(20, 8))\n    plt.plot(history.history['loss'], label='Training Loss')\n    plt.plot(history.history['val_loss'], label='Validation Loss')\n    plt.plot(history.history['accuracy'], label='Training Accuracy')\n    plt.plot(history.history['val_accuracy'], label='Validation Accuracy')\n    plt.title('Training and Validation Loss and Accuracy')\n    plt.xlabel('Epochs')\n    plt.ylabel('Loss and Accuracy')\n    plt.legend()\n    plt.grid(True)\n    plt.show()\n\n\n# ----Main----\nX_train, X_test, y_train, y_test = read_data()\nbuild_and_train_model(X_train, X_test, y_train, y_test)\n","metadata":{},"execution_count":null,"outputs":[]}]}